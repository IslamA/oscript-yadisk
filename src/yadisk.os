#Использовать json
#Использовать logos

Перем ТокенАвторизации;
Перем АдресСервиса;
Перем ВерсияAPI;

Перем Соединение;
Перем ПарсерJSON;
Перем Лог;

// Важно!!! Под linux для корректной работы HTTPS-соединения нужно выполнить команду 
// mozroots --import --sync

Процедура Инициализировать() 

    АдресСервиса = "https://cloud-api.yandex.net";
    ВерсияAPI = "v1";

    Соединение = Новый HTTPСоединение(ПолучитьАдресСервиса());    
    ПарсерJSON = Новый ПарсерJSON;

    Лог = Логирование.ПолучитьЛог("oscript.lib.yadisk");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПУБЛИЧНЫЕ МЕТОДЫ
///////////////////////////////////////////////////////////////////////////////

Процедура УстановитьТокенАвторизации(Токен) Экспорт
    ТокенАвторизации = Токен;
КонецПроцедуры

Процедура УстановитьРежимОтладки(Включить=Истина) Экспорт
    Лог.УстановитьУровень(?(Включить, УровниЛога.Отладка, УровниЛога.Информация));
КонецПроцедуры

Функция ПолучитьВерсиюAPI() Экспорт
    Возврат ВерсияAPI;
КонецФункции

Функция ПолучитьАдресСервиса() Экспорт
    Возврат АдресСервиса; 
КонецФункции

Функция ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса=Неопределено, Относительный=Истина) Экспорт

    СтрокаЗапроса = ?(ПараметрыЗапроса = Неопределено, "", РаботаСUrl.СформироватьСтрокуЗапроса(ПараметрыЗапроса));
    Если НЕ ПустаяСтрока(СтрокаЗапроса) Тогда
        СтрокаЗапроса = "?" + СтрокаЗапроса;
    КонецЕсли;

    Возврат ?(Относительный, "", ПолучитьАдресСервиса()) + "/" + ПолучитьВерсиюAPI() + Ресурс + СтрокаЗапроса; 

КонецФункции

Функция ПолучитьЛог() Экспорт
    Возврат Лог;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// API Яндекс.Диска
///////////////////////////////////////////////////////////////////////////////

//@see https://tech.yandex.ru/disk/api/reference/capacity-docpage/
Функция ПолучитьСвойстваДиска() Экспорт

    Возврат ВыполнитьЗапросМетодомGET("/disk");

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/meta-docpage/
Функция ПолучитьСвойстваРесурса(ПутьНаДиске, СтруктураДополнительныхПараметров=Неопределено) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path,sort,limit,offset,fields,preview_size,preview_crop",
        Новый Структура("path", ПутьНаДиске), 
        СтруктураДополнительныхПараметров
    );

    Возврат ВыполнитьЗапросМетодомGET("/disk/resources", ПараметрыЗапроса);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/meta-docpage/
Функция ПолучитьСвойстваРесурсаВКорзине(ПутьВКорзине, СтруктураДополнительныхПараметров=Неопределено) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path,sort,limit,offset,fields,preview_size,preview_crop",
        Новый Структура("path", ПутьВКорзине), 
        СтруктураДополнительныхПараметров
    );

    Возврат ВыполнитьЗапросМетодомGET("/disk/trash/resources", ПараметрыЗапроса);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/all-files-docpage/
Функция ПолучитьСписокВсехФайлов(СтруктураДополнительныхПараметров=Неопределено) Экспорт
 
    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "limit,media_type,offset,fields,preview_size,preview_crop",
        Неопределено, 
        СтруктураДополнительныхПараметров
    );

    Возврат ВыполнитьЗапросМетодомGET("/disk/resources/files", ПараметрыЗапроса);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/recent-upload-docpage/
Функция ПолучитьСписокПоследнихЗагруженныхФайлов(СтруктураДополнительныхПараметров=Неопределено) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "limit,media_type,fields,preview_size,preview_crop", //WTF? В запросе почему-то нет параметра offset (в документации Яндекса его тоже нет)
        Неопределено, 
        СтруктураДополнительныхПараметров
    );

    Возврат ВыполнитьЗапросМетодомGET("/disk/resources/last-uploaded", ПараметрыЗапроса);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/meta-add-docpage/
Функция УстановитьДопСвойстваРесурса(ПутьНаДиске, Свойства) Экспорт
    
    ВызватьИсключение ИсключениеМетодНеПоддерживается("HTTPСоединение в 1Script не поддерживает отправку запросов методом PATCH");

КонецФункции

Функция ПолучитьДопСвойстваРесурса(ПутьНаДиске, ИменаСвойств="") Экспорт
    
    ВызватьИсключение ИсключениеМетодНеПоддерживается();

КонецФункции

Функция УстановитьДопСвойствоРесурса(ПутьНаДиске, ИмяСвойства, ЗначениеСвойства) Экспорт
    
    Свойства = Новый Соответствие;
    Свойства.Вставить(ИмяСвойства, ЗначениеСвойства);
    
    Возврат УстановитьДопСвойстваРесурса(ПутьНаДиске, Свойства);

КонецФункции

Функция ПолучитьДопСвойствоРесурса(ПутьНаДиске, ИмяСвойства) Экспорт
    
    Свойства = ПолучитьДопСвойстваРесурса(ПутьНаДиске, ИмяСвойства);

    Возврат ?(Свойства = Неопределено, Неопределено, Свойства[ИмяСвойства]);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/upload-docpage/
Процедура ЗагрузитьНаДиск(ЛокальныйПуть, ПутьНаДиске, Перезаписывать=Ложь) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path,overwrite,fields",
        Новый Структура("path", ПутьНаДиске), 
        Новый Структура("overwrite", Перезаписывать)
    );

    Ссылка = ВыполнитьЗапросМетодомGET("/disk/resources/upload", ПараметрыЗапроса);    

    Запрос = Новый HTTPЗапрос(Ссылка.href, СформироватьHTTPЗаголовки(Ложь));
    Запрос.УстановитьИмяФайлаТела(ЛокальныйПуть);
    
    Ответ = Соединение.Записать(Запрос);
    Если Ответ.КодСостояния <> 201 Тогда        
        ВызватьИсключение ИсключениеЯндексДиска(Ответ,"ЗагрузитьНаДиск");
    КонецЕсли;

КонецПроцедуры

//@see https://tech.yandex.ru/disk/api/reference/upload-ext-docpage/
Функция СкачатьНаДискИзИнтернета(ПутьНаДиске, UrlФайла, ЗапретитьРедитекты=Ложь) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "url,path,fields,disable_redirects",
        Новый Структура("url,path", UrlФайла, ПутьНаДиске),
        Новый Структура("disable_redirects", ЗапретитьРедитекты)
    );

    Ответ = Соединение.ОтправитьДляОбработки(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/resources/upload", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 202 Тогда
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        Ссылка =  ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);
        Возврат Ссылка;                
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/content-docpage/
Функция СкачатьФайлСДиска(ЛокальныйПуть, ПутьНаДиске, Перезаписывать=Ложь) Экспорт
    
    ЛокальныйПутьКФайлу = СформироватьПроверитьЛокальныйПутьСкачиваемогоФайла(ЛокальныйПуть, ПутьНаДиске, Неопределено, Перезаписывать);

    Параметры = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path,fields",
        Новый Структура("path", ПутьНаДиске)
    );

    СсылкаДляСкачивания = ВыполнитьЗапросМетодомGET("/disk/resources/download", Параметры);

    Запрос = Новый HTTPЗапрос(СсылкаДляСкачивания.href, СформироватьHTTPЗаголовки());

    Ответ = Соединение.Получить(Запрос);    
    Если Ответ.КодСостояния = 200 Тогда
    
        ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
        ДвоичныеДанные.Записать(ЛокальныйПутьКФайлу);

        Возврат ЛокальныйПутьКФайлу;

    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/copy-docpage/
Функция Копировать(ПутьИсточникаНаДиске, ПутьНазначенияНаДиске, Перезаписывать=Ложь, ДожидатьсяРезультатаВыполнения=Ложь) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "from,path,overwrite,fields",
        Новый Структура("from,path", ПутьИсточникаНаДиске, ПутьНазначенияНаДиске),
        Новый Структура("overwrite", Перезаписывать)
    );

    Ответ = Соединение.ОтправитьДляОбработки(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/resources/copy", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 202 Тогда
        
        // Копируется непуская папка
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        СсылкаНаСтатусОперации =  ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);
        
        Если ДожидатьсяРезультатаВыполнения Тогда
            Возврат (ДождатьсяРезультатаВыполненияОперации(СсылкаНаСтатусОперации, "Копировать") = "success");
        КонецЕсли;

        Возврат СсылкаНаСтатусОперации;

    ИначеЕсли Ответ.КодСостояния = 201 Тогда
        Возврат Истина;  
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ); 

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/move-docpage/
Функция Переместить(ПутьИсточникаНаДиске, ПутьНазначенияНаДиске, Перезаписывать=Ложь, ДожидатьсяРезультатаВыполнения=Ложь) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "from,path,overwrite,fields",
        Новый Структура("from,path", ПутьИсточникаНаДиске, ПутьНазначенияНаДиске),
        Новый Структура("overwrite", Перезаписывать)
    );

    Ответ = Соединение.ОтправитьДляОбработки(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/resources/move", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 202 Тогда
        
        // Перемещается непуская папка
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        СсылкаНаСтатусОперации =  ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);

        Если ДожидатьсяРезультатаВыполнения Тогда
            Возврат (ДождатьсяРезультатаВыполненияОперации(СсылкаНаСтатусОперации, "Переместить") = "success");
        КонецЕсли;

        Возврат СсылкаНаСтатусОперации;              

    ИначеЕсли Ответ.КодСостояния = 201 Тогда
        Возврат Истина;  
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ); 

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/delete-docpage/
Функция Удалить(ПутьНаДиске, Безвозвратно=Ложь, ДожидатьсяРезультатаВыполнения=Ложь) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path,permanently,fields",
        Новый Структура("path", ПутьНаДиске),
        Новый Структура("permanently", Безвозвратно)
    );

    Лог.Отладка(ПолучитьАдресРесурса("/disk/resources", ПараметрыЗапроса));

    Ответ = Соединение.Удалить(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/resources", ПараметрыЗапроса),
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 202 Тогда
        
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        СсылкаНаСтатусОперации = ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);
        
        Если ДожидатьсяРезультатаВыполнения Тогда
            Возврат (ДождатьсяРезультатаВыполненияОперации(СсылкаНаСтатусОперации, "Удалить") = "success");
        КонецЕсли;
        
        Возврат СсылкаНаСтатусОперации;

    ИначеЕсли Ответ.КодСостояния = 204 Тогда
        Возврат Истина;
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

Функция ИсключениеТаймаутОжиданияВыполненияОперации(ИмяОперации)
    Возврат "Таймаут ожидания завершени операции " + ИмяОперации;
КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/create-folder-docpage/
Функция СоздатьПапку(ПутьНаДиске) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path,fields",
        Новый Структура("path", ПутьНаДиске),
        Неопределено
    ); 

    Ответ = Соединение.Записать(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/resources", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния <> 201 Тогда        
        ВызватьИсключение ИсключениеЯндексДиска(Ответ,"СоздатьПапку");
    КонецЕсли;

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/publish-docpage/
Функция Опубликовать(ПутьНаДиске) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path",
        Новый Структура("path", ПутьНаДиске),
        Неопределено
    ); 

    Ответ = Соединение.Записать(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/resources/publish", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 200 Тогда    
        // Получим публичный URL.    
        СвойстваРесурса = ПолучитьСвойстваРесурса(ПутьНаДиске, Новый Структура("fields", "public_url"));
        Возврат СвойстваРесурса.public_url;
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ,"СоздатьПапку");

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/publish-docpage/#unpublish-q
Функция ОтменитьПубликацию(ПутьНаДиске) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path",
        Новый Структура("path", ПутьНаДиске),
        Неопределено
    ); 

    Ответ = Соединение.Записать(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/resources/unpublish", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния <> 200 Тогда    
        ВызватьИсключение ИсключениеЯндексДиска(Ответ,"СоздатьПапку");
    КонецЕсли;

КонецФункции

//@see  https://tech.yandex.ru/disk/api/reference/public-docpage/#meta
Функция ПолучитьСвойстваПубличногоРесурса(КлючПубличногоРесурса, СтруктураДополнительныхПараметров=Неопределено) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "public_key,path,sort,limit,offset,preview_size,preview_crop",
        Новый Структура("public_key", КлючПубличногоРесурса), 
        СтруктураДополнительныхПараметров
    );

    Возврат ВыполнитьЗапросМетодомGET("/disk/public/resources", ПараметрыЗапроса);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/public-docpage/#download
Функция СкачатьПубличныйРесурс(ЛокальныйПуть, КлючПубличногоРесурса, ПутьВнутриПубличнойПапки="", Перезаписывать=Ложь) Экспорт

    ЛокальныйПутьКФайлу = СформироватьПроверитьЛокальныйПутьСкачиваемогоФайла(ЛокальныйПуть, ПутьВнутриПубличнойПапки, КлючПубличногоРесурса, Перезаписывать);

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "public_key,path",
        Новый Структура("public_key", КлючПубличногоРесурса),
        ?(ПустаяСтрока(ПутьВнутриПубличнойПапки), Неопределено, Новый Структура("path", ПутьВнутриПубличнойПапки))
    );

    СсылкаДляСкачивания = ВыполнитьЗапросМетодомGET("/disk/public/resources/download", ПараметрыЗапроса);

    Запрос = Новый HTTPЗапрос(СсылкаДляСкачивания.href, СформироватьHTTPЗаголовки());

    Ответ = Соединение.Получить(Запрос);    
    Если Ответ.КодСостояния = 200 Тогда
    
        ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
        ДвоичныеДанные.Записать(ЛокальныйПутьКФайлу);

        Возврат ЛокальныйПутьКФайлу;

    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/public-docpage/#save
Функция СохранитьПубличныйРесурсВЗагрузки(КлючПубличногоРесурса, ПутьВнутриПубличнойПапки="", НовоеИмя="") Экспорт
    
    СтруктураДополнительныхПараметров = Новый Структура;
    Если НЕ ПустаяСтрока(ПутьВнутриПубличнойПапки) Тогда
        СтруктураДополнительныхПараметров.Вставить("path", ПутьВнутриПубличнойПапки);
    КонецЕсли;
    Если НЕ ПустаяСтрока(НовоеИмя) Тогда
        СтруктураДополнительныхПараметров.Вставить("name", НовоеИмя);
    КонецЕсли;

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "public_key,path,name",
        Новый Структура("public_key", КлючПубличногоРесурса),
        СтруктураДополнительныхПараметров
    );

    Ответ = Соединение.ОтправитьДляОбработки(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/public/resources/save-to-disk/", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 202 Тогда
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        Ссылка =  ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);
        Возврат Ссылка;                
    ИначеЕсли Ответ.КодСостояния = 201 Тогда
        Возврат Истина;
    КонецЕсли;        

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/recent-public-docpage/
Функция ПолучитьСписокОпубликованныхРесурсов(СтруктураДополнительныхПараметров=Неопределено) Экспорт

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "limit,offset,type,fields,preview_size",
        Неопределено, 
        СтруктураДополнительныхПараметров
    );

    Возврат ВыполнитьЗапросМетодомGET("/disk/resources/public", ПараметрыЗапроса);

КонецФункции

Функция ПолучитьФайлыВКорзине() Экспорт
    Возврат ВыполнитьЗапросМетодомGET("/disk/trash/resources/");
КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/trash-delete-docpage/
Функция ОчиститьКорзину(ПутьВКорзине="", ДожидатьсяРезультатаВыполнения=Ложь) Экспорт
    
    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path",
        Неопределено,
        ?(ПустаяСтрока(ПутьВКорзине), Неопределено, Новый Структура("path", ПутьВКорзине))
    );

    Ответ = Соединение.Удалить(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/trash/resources/", ПараметрыЗапроса),
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 202 Тогда
        
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        СсылкаНаСтатусОперации = ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);
        
        Если ДожидатьсяРезультатаВыполнения Тогда
            Возврат (ДождатьсяРезультатаВыполненияОперации(СсылкаНаСтатусОперации, "ОчиститьКорзину") = "success");
        КонецЕсли;

        Возврат СсылкаНаСтатусОперации;        

    ИначеЕсли Ответ.КодСостояния = 204 Тогда
        Возврат Истина;
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/trash-restore-docpage/
Функция ВосстановитьРесурсИзКорзины(ПутьВКорзине, НовоеИмя="", Перезаписывать=Ложь, ДожидатьсяРезультатаВыполнения=Ложь) Экспорт
   
    СтруктураДополнительныхПараметров = Новый Структура;
    Если НЕ ПустаяСтрока(НовоеИмя) Тогда
        СтруктураДополнительныхПараметров.Вставить("name", НовоеИмя);
    КонецЕсли;
    Если Перезаписывать Тогда
        СтруктураДополнительныхПараметров.Вставить("overwrite", Перезаписывать);
    КонецЕсли;

    ПараметрыЗапроса = РаботаСUrl.СформироватьСтруктуруПараметровЗапроса(
        "path,name,overwrite",
        Новый Структура("path", ПутьВКорзине), 
        СтруктураДополнительныхПараметров
    );

    Ответ = Соединение.Записать(Новый HTTPЗапрос(
        ПолучитьАдресРесурса("/disk/trash/resources/restore", ПараметрыЗапроса), 
        СформироватьHTTPЗаголовки()
    ));

    Если Ответ.КодСостояния = 202 Тогда
        
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        
        СсылкаНаСтатусОперации = ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);
        
        Если ДожидатьсяРезультатаВыполнения Тогда
            Возврат (ДождатьсяРезультатаВыполненияОперации(СсылкаНаСтатусОперации, "ВосстановитьРесурсИзКорзины") = "success");
        КонецЕсли;

        Возврат СсылкаНаСтатусОперации;

    ИначеЕсли Ответ.КодСостояния = 201 Тогда
        Возврат Истина;
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

//@see https://tech.yandex.ru/disk/api/reference/operations-docpage/
Функция ПолучитьСтатусОперации(Ссылка) Экспорт

    Запрос = Новый HTTPЗапрос(Ссылка.href, СформироватьHTTPЗаголовки());

    Ответ = Соединение.Получить(Запрос);

    Если Ответ.КодСостояния = 200 Тогда        
        
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        
        СтатусОперации =  ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);        
        Возврат СтатусОперации.status;

    КонецЕсли;    

    ВызватьИсключение ИсключениеЯндексДиска(Ответ);

КонецФункции

Функция ДождатьсяРезультатаВыполненияОперации(СсылкаНаСтатусОперации, ИмяОперации) Экспорт    
    Лог.Отладка("Ожидаем результата выполнения операции " + ИмяОперации);
    
    КоличествоПопыток = 10;    
    Пока Истина Цикл
        
        ТекущийСтатус = ПолучитьСтатусОперации(СсылкаНаСтатусОперации);
        Если ТекущийСтатус <> "in-progress" Тогда
            Лог.Отладка(СтрШаблон("Получен результат операции %1: %2", ИмяОперации, ТекущийСтатус));
            Возврат ТекущийСтатус;
        КонецЕсли;
        
        КоличествоПопыток = КоличествоПопыток - 1;
        Если КоличествоПопыток = 0 Тогда
            ВызватьИсключение ИсключениеТаймаутОжиданияВыполненияОперации(ИмяОперации);
        КонецЕсли;
        
        Приостановить(1000);

    КонецЦикла;
    
    Возврат Неопределено;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ
///////////////////////////////////////////////////////////////////////////////

Функция ИсключениеМетодНеПоддерживается(ДополнительнаяИнформация = "")
    Возврат "Метод в настоящий момент не поддерживается" + ?(ПустаяСтрока(ДополнительнаяИнформация), "", ": " + ДополнительнаяИнформация);
КонецФункции

Функция ИсключениеКаталогНеСуществует(Путь)
    Возврат "Каталог не существует: " + Путь;
КонецФункции

Функция ИсключениеФайлСуществует(Путь)
    Возврат "Файл существует: " + Путь;
КонецФункции

Функция ИсключениеЯндексДиска(HTTPОтвет, МеткаДляОтладки="")
    ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
    
    Попытка 
        ОбъектОшибки = ПарсерJSON.ПрочитатьJSON(ТелоОтвета,,,Истина);
        ОписаниеОшибки = ОбъектОшибки.description;
    Исключение
        ОписаниеОшибки = ТелоОтвета;
    КонецПопытки;
    
    ТекстИсключения = СтрШаблон("Яндекс.Диск ответил кодом ошибки %1: %2", HTTPОтвет.КодСостояния, ОписаниеОшибки);

    Лог.Ошибка(?(ПустаяСтрока(МеткаДляОтладки), "", " [" + МеткаДляОтладки + "] ") + ТекстИсключения);
    
    Возврат ТекстИсключения;
КонецФункции

Функция СформироватьHTTPЗаголовки(ДобавлятьТокенАвторизации=Истина)
    Заголовки = Новый Соответствие();
    Заголовки.Вставить("Accept", "application/json");
    Заголовки.Вставить("Content-Type", "application/json");
    Если ДобавлятьТокенАвторизации Тогда
        Заголовки.Вставить("Authorization", ТокенАвторизации);
    КонецЕсли;
    Возврат Заголовки;
КонецФункции

Функция ВыполнитьЗапросМетодомGET(Ресурс, ПараметрыЗапроса=Неопределено)    
    Запрос = Новый HTTPЗапрос(
        ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса),
        СформироватьHTTPЗаголовки()
    );

    Лог.Отладка(ПолучитьАдресРесурса(Ресурс, ПараметрыЗапроса));

    Ответ = Соединение.Получить(Запрос);

    Если Ответ.КодСостояния = 200 Тогда        
        СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
        Лог.Отладка(СтрокаОтвета);
        Объект =  ПарсерJSON.ПрочитатьJSON(СтрокаОтвета,,,Истина);
        Возврат Объект;
    КонецЕсли;

    ВызватьИсключение ИсключениеЯндексДиска(Ответ, "ВыполнитьЗапросМетодомGET");
КонецФункции

Функция СформироватьПроверитьЛокальныйПутьСкачиваемогоФайла(ЛокальныйПуть, ПутьНаДиске, КлючПубличногоРесурса, Перезаписывать)

    // Определяем локальный каталог, в который будем скачивать файл и имя скачанного файла.
    ИмяФайла = "";
    КаталогНазначения = Новый Файл(ЛокальныйПуть);

    Если КаталогНазначения.ЭтоФайл() Тогда
        
        Лог.Отладка("Локальный путь - это файл: " + ЛокальныйПуть);
        ИмяФайла = КаталогНазначения.Имя;
        КаталогНазначения = Новый Файл(КаталогНазначения.Путь);

    ИначеЕсли КаталогНазначения.ЭтоКаталог() Тогда
        
        // Если ЛокальныйПуть - это каталог, в который надо скачать файл, 
        // то сохраним исходное имя файла, как оно было задано на Диске.
        Лог.Отладка("Локальный путь - это каталог: " + ЛокальныйПуть);
        СвойстваРесурса = ?(КлючПубличногоРесурса = Неопределено, 
            ПолучитьСвойстваРесурса(ПутьНаДиске, Новый Структура("fields", "name,type")),
            ПолучитьСвойстваПубличногоРесурса(КлючПубличногоРесурса, Новый Структура("path", ПутьНаДиске))
        );
    
        ИмяФайла = СвойстваРесурса.name;
        Если СвойстваРесурса.type = "dir" Тогда
            // Папки скачиваются как zip-архив.
            ИмяФайла = ИмяФайла + ".zip";
        КонецЕсли;
    
    КонецЕсли;

    // Каталог, в который скачиваем файл должен существовать.
    Если НЕ КаталогНазначения.Существует() Тогда
        ВызватьИсключение ИсключениеКаталогНеСуществует(КаталогНазначения);
    КонецЕсли;

    ФайлНазначения = Новый Файл(ОбъединитьПути(КаталогНазначения.ПолноеИмя, ИмяФайла));
    Если ФайлНазначения.Существует() И НЕ Перезаписывать Тогда
        ВызватьИсключение ИсключениеФайлСуществует(ФайлНазначения.ПолноеИмя);
    КонецЕсли;

    Возврат ФайлНазначения.ПолноеИмя

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////////////////

Инициализировать();