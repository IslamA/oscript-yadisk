// Получить тестовый токен авторизации
// https://oauth.yandex.ru/authorize?response_type=token&client_id=a00af60f173b48069768971060ebb81d

#Использовать ".."

Перем юТест;
Перем ЯндексДиск;

Функция Инициализировать()
    
    OAuth_Токен = ПолучитьТокенАвторизации();
    ЯндексДиск = Новый ЯндексДиск;
    ЯндексДиск.УстановитьТокенАвторизации(OAuth_Токен);
    ЯндексДиск.УстановитьРежимОтладки(РежимОтладки());

КонецФункции

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
    
    юТест = ЮнитТестирование;
    
    СписокТестов = Новый Массив;
    
    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСвойствДиска");
    
    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСвойствФайла");
    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСвойствПапки");
    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСвойствНесуществующегоФайла");

    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСвойствФайлаВКорзине");

    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСпискаФайлов_БезАргументов");
    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСпискаФайлов_САргументами");
        
    СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеСпискаПоследнихЗагруженныхФайлов");

    СписокТестов.Добавить("ТестДолжен_ПроверитьЗагрузкуФайлаНаДиск");

    СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуПроизвольногоСвойстваФайла");

    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеФайлаИзИнтернета");

    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_ССохранениемОригинальногоИмени");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_СНазначениемНовогоИмени");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_ВНесуществующийКаталог");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_КогдаЦелевойФайлСуществуетИПерезаписыватьНельзя");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_КогдаЦелевойФайлСуществуетИНадоПерезаписать");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_КогдаСкачиваетсяПапка");
    
    СписокТестов.Добавить("ТестДолжен_ПроверитьУдалениеФайла_ВКорзину");
    СписокТестов.Добавить("ТестДолжен_ПроверитьУдалениеФайла_Безвозвратно");

    СписокТестов.Добавить("ТестДолжен_ПроверитьКопированиеФайла");
    СписокТестов.Добавить("ТестДолжен_ПроверитьПеремещениеФайла");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСозданиеПапки");

    СписокТестов.Добавить("ТестДолжен_ПроверитьПубликациюРесурсаИОтменуПубликации");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеПубличногоРесурса");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеОтдельногоФайлаИзПубличнойПапки");
    СписокТестов.Добавить("ТестДолжен_ПроверитьСкачиваниеПубличногоРесурсаВЗагрузки");

    СписокТестов.Добавить("ТестДолжен_ПроверитьОчисткуКорзины");
    СписокТестов.Добавить("ТестДолжен_ПроверитьВосстановлениеИзКорзины");

    Возврат СписокТестов;

КонецФункции

///////////////////////////////////////////////////////////////////
// Тесты

Процедура ТестДолжен_ПроверитьПолучениеСвойствДиска() Экспорт

    СвойстваДиска = ЯндексДиск.ПолучитьСвойстваДиска();
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваДиска));
    юТест.ПроверитьИстину(СвойстваДиска.Свойство("trash_size"));
    юТест.ПроверитьИстину(СвойстваДиска.Свойство("total_space"));
    юТест.ПроверитьИстину(СвойстваДиска.Свойство("used_space"));
    юТест.ПроверитьИстину(СвойстваДиска.Свойство("system_folders"));
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваДиска.system_folders));

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСпискаФайлов_БезАргументов() Экспорт

    СписокФайлов = ЯндексДиск.ПолучитьСписокВсехФайлов();

    юТест.ПроверитьИстину(СписокФайлов.Свойство("items"));
    юТест.ПроверитьРавенство(Тип("Массив"), ТипЗнч(СписокФайлов.items));
    
    юТест.ПроверитьРавенство(20, СписокФайлов.limit);
    юТест.ПроверитьРавенство(0, СписокФайлов.offset);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСпискаФайлов_САргументами() Экспорт

    Параметры = Новый Структура();
    Параметры.Вставить("limit", 2);
    Параметры.Вставить("offset", 1);

    СписокФайлов = ЯндексДиск.ПолучитьСписокВсехФайлов(Параметры);

    юТест.ПроверитьИстину(СписокФайлов.Свойство("items"));
    юТест.ПроверитьРавенство(Тип("Массив"), ТипЗнч(СписокФайлов.items));
    юТест.ПроверитьРавенство(2, СписокФайлов.items.Количество());
    
    юТест.ПроверитьРавенство(2, СписокФайлов.limit);
    юТест.ПроверитьРавенство(1, СписокФайлов.offset);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСвойствФайла() Экспорт
    
    СвойстваФайла = ЯндексДиск.ПолучитьСвойстваРесурса("/test-folder/file1.txt");

    юТест.ПроверитьИстину(СвойстваФайла.Свойство("name"));
    юТест.ПроверитьРавенство("file1.txt", СвойстваФайла.name);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСвойствПапки() Экспорт

    СвойстваПапки = ЯндексДиск.ПолучитьСвойстваРесурса("/test-folder");

    юТест.ПроверитьИстину(СвойстваПапки.Свойство("name"));
    юТест.ПроверитьРавенство("test-folder", СвойстваПапки.name);
    юТест.ПроверитьРавенство("dir", СвойстваПапки.type);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСвойствНесуществующегоФайла() Экспорт

    МассивАргументов = Новый Массив;
    МассивАргументов.Добавить("/test-folder/file-does-not-exists.txt");
    МассивАргументов.Добавить(Неопределено);

    ПроверитьЧтоВызовВыбрасываетИсключение(ЯндексДиск, "ПолучитьСвойстваРесурса", МассивАргументов, "Яндекс.Диск ответил кодом ошибки 404: Resource not found");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСвойствФайлаВКорзине() Экспорт
    
    СвойстваФайла = ЯндексДиск.ПолучитьСвойстваРесурсаВКорзине("deleted_file.txt");

    юТест.ПроверитьИстину(СвойстваФайла.Свойство("name"));
    юТест.ПроверитьРавенство("deleted_file.txt", СвойстваФайла.name);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСпискаПоследнихЗагруженныхФайлов() Экспорт
    
    Параметры = Новый Структура;
    Параметры.Вставить("limit", 2);

    СписокПоследних = ЯндексДиск.ПолучитьСписокПоследнихЗагруженныхФайлов(Параметры);

    юТест.ПроверитьИстину(СписокПоследних.Свойство("items"));
    юТест.ПроверитьРавенство(Тип("Массив"), ТипЗнч(СписокПоследних.items));    
    юТест.ПроверитьРавенство(2, СписокПоследних.limit);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗагрузкуФайлаНаДиск() Экспорт
    
    ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".txt";
    ПутьНаДиске = "/test-folder/" + ИмяФайла;

    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьНаДиске);

    СвойстваФайла = ЯндексДиск.ПолучитьСвойстваРесурса(ПутьНаДиске);
    юТест.ПроверитьРавенство(ИмяФайла, СвойстваФайла.name);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуПроизвольногоСвойстваФайла() Экспорт
    
    ЗначениеСвойства = Строка(Новый УникальныйИдентификатор);
    
    ЯндексДиск.УстановитьДопСвойствоРесурса("/test-folder/file1.txt", "MyProperty", ЗначениеСвойства);

    юТест.ПроверитьРавенство(ЗначениеСвойства, ЯндексДиск.ПолучитьДопСвойствоРесурса("/test-folder/file1.txt", "MyProperty"));

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеФайлаИзИнтернета() Экспорт
    
    СсылкаПроверкиСтатуса = ЯндексДиск.СкачатьНаДискИзИнтернета("/test-folder/onescript-nightly.zip", "http://oscript.io/downloads/night-build/zip");
    СтатусОперации = ЯндексДиск.ПолучитьСтатусОперации(СсылкаПроверкиСтатуса);
    юТест.ПроверитьВхождение("in-progress,success,failure", СтатусОперации);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_ССохранениемОригинальногоИмени() Экспорт

    ЦелевойКаталог = КаталогВременныхФайлов();
    ПутьКЦелевомуФайлу = ОбъединитьПути(ЦелевойКаталог, "file1.txt");
    Если (Новый Файл(ПутьКЦелевомуФайлу)).Существует() Тогда
        УдалитьФайлы(ПутьКЦелевомуФайлу);
    КонецЕсли;

    ПутьКСкачанномуФайлу = ЯндексДиск.СкачатьФайлСДиска(ЦелевойКаталог, "/test-folder/file1.txt");
    
    юТест.ПроверитьИстину((Новый Файл(ПутьКСкачанномуФайлу)).Существует());
    юТест.ПроверитьРавенство(ПутьКЦелевомуФайлу, ПутьКСкачанномуФайлу);
    
    Попытка
        УдалитьФайлы(ПутьКЦелевомуФайлу);
    Исключение
    КонецПопытки;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_СНазначениемНовогоИмени() Экспорт

    ПутьКЦелевомуФайлу = ОбъединитьПути(КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор));

    ПутьКСкачанномуФайлу = ЯндексДиск.СкачатьФайлСДиска(ПутьКЦелевомуФайлу, "/test-folder/file1.txt");
    
    юТест.ПроверитьИстину((Новый Файл(ПутьКСкачанномуФайлу)).Существует());
    юТест.ПроверитьРавенство(ПутьКЦелевомуФайлу, ПутьКСкачанномуФайлу);

    Попытка
        УдалитьФайлы(ПутьКЦелевомуФайлу);
    Исключение
    КонецПопытки;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_ВНесуществующийКаталог() Экспорт

    ФайлВНесуществующемКаталоге = ОбъединитьПути(КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор), "test.txt");

    МассивАргументов = Новый Массив;
    МассивАргументов.Добавить(ФайлВНесуществующемКаталоге);
    МассивАргументов.Добавить("/test-folder/file1.txt");
    МассивАргументов.Добавить(Ложь);

    ПроверитьЧтоВызовВыбрасываетИсключение(ЯндексДиск, "СкачатьФайлСДиска", МассивАргументов, "Каталог не существует");
    
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_КогдаЦелевойФайлСуществуетИПерезаписыватьНельзя() Экспорт

    ИмяФайла = ОбъединитьПути(КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор));

    ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
    ЗаписьТекста.Закрыть();

    МассивАргументов = Новый Массив;
    МассивАргументов.Добавить(ИмяФайла);
    МассивАргументов.Добавить("/test-folder/file1.txt");
    МассивАргументов.Добавить(Ложь);

    ПроверитьЧтоВызовВыбрасываетИсключение(ЯндексДиск, "СкачатьФайлСДиска", МассивАргументов, "Файл существует");
    
    Попытка
        УдалитьФайлы(ИмяФайла);
    Исключение
    КонецПопытки;    

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_КогдаЦелевойФайлСуществуетИНадоПерезаписать() Экспорт

    ПутьКЦелевомуФайлу = ОбъединитьПути(КаталогВременныхФайлов(), Строка(Новый УникальныйИдентификатор));
    ЗаписьТекста = Новый ЗаписьТекста(ПутьКЦелевомуФайлу);
    ЗаписьТекста.Закрыть();

    ПутьКСкачанномуФайлу = ЯндексДиск.СкачатьФайлСДиска(ПутьКЦелевомуФайлу, "/test-folder/file1.txt", Истина);
    
    юТест.ПроверитьИстину((Новый Файл(ПутьКСкачанномуФайлу)).Существует());
    юТест.ПроверитьРавенство(ПутьКЦелевомуФайлу, ПутьКСкачанномуФайлу);

    // Проверим, по содержимому, что это именно тот файл, что мы скачивали.
    ЧтениеТекста = Новый ЧтениеТекста(ПутьКЦелевомуФайлу);
    Содержимое = ЧтениеТекста.Прочитать();
    ЧтениеТекста.Закрыть();

    юТест.ПроверитьРавенство("Hello!", СокрЛП(Содержимое));

    Попытка
        УдалитьФайлы(ПутьКЦелевомуФайлу);
    Исключение
    КонецПопытки;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеФайлаСДиска_КогдаСкачиваетсяПапка() Экспорт
    
    ЦелевойКаталог = КаталогВременныхФайлов();
    ПутьКЦелевомуФайлу = ОбъединитьПути(ЦелевойКаталог, "test-folder.zip");
    Если (Новый Файл(ПутьКЦелевомуФайлу)).Существует() Тогда
        УдалитьФайлы(ПутьКЦелевомуФайлу);
    КонецЕсли;

    ПутьКСкачанномуФайлу = ЯндексДиск.СкачатьФайлСДиска(ПутьКЦелевомуФайлу, "/test-folder");

    юТест.ПроверитьИстину((Новый Файл(ПутьКСкачанномуФайлу)).Существует());
    юТест.ПроверитьРавенство(ПутьКЦелевомуФайлу, ПутьКСкачанномуФайлу);   

    Попытка
        УдалитьФайлы(ПутьКЦелевомуФайлу);
    Исключение
    КонецПопытки;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУдалениеФайла_ВКорзину() Экспорт

    ПутьКЦелевомуФайлу = "/" + Строка(Новый УникальныйИдентификатор) + ".txt";
    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКЦелевомуФайлу);
    
    юТест.ПроверитьИстину(ЯндексДиск.Удалить(ПутьКЦелевомуФайлу));

    // Проверяем, что на диске файла больше нет.
    МассивАргументов = Новый Массив;
    МассивАргументов.Добавить(ПутьКЦелевомуФайлу);
    МассивАргументов.Добавить(Новый Структура("fields", "name"));    
    ПроверитьЧтоВызовВыбрасываетИсключение(ЯндексДиск, "ПолучитьСвойстваРесурса", МассивАргументов, "404");

    // Но при этом файл оказался в корзине.
    СвойстваУдаленногоФайла = ЯндексДиск.ПолучитьСвойстваРесурсаВКорзине(ПутьКЦелевомуФайлу, Новый Структура("fields", "name"));
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваУдаленногоФайла));

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУдалениеФайла_Безвозвратно() Экспорт

    ПутьКЦелевомуФайлу = "/" + Строка(Новый УникальныйИдентификатор) + ".txt";
    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКЦелевомуФайлу);

    юТест.ПроверитьИстину(ЯндексДиск.Удалить(ПутьКЦелевомуФайлу, Истина));

    // Проверяем, что файла больше нет.
    МассивАргументов = Новый Массив;
    МассивАргументов.Добавить(ПутьКЦелевомуФайлу);
    МассивАргументов.Добавить(Новый Структура("fields", "name"));    
    ПроверитьЧтоВызовВыбрасываетИсключение(ЯндексДиск, "ПолучитьСвойстваРесурса", МассивАргументов, "404");

    // Проверяем, что в корзине файла тоже нет.   
    ПроверитьЧтоВызовВыбрасываетИсключение(ЯндексДиск, "ПолучитьСвойстваРесурсаВКорзине", МассивАргументов, "404")

КонецПроцедуры

Процедура ТестДолжен_ПроверитьКопированиеФайла() Экспорт
    
    ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".txt";
    ПутьКИсходномуФайлу = "/" + ИмяФайла;
    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКИсходномуФайлу);

    ПутьККопии = "/test-folder/" + ИмяФайла;

    юТест.ПроверитьИстину(ЯндексДиск.Копировать(ПутьКИсходномуФайлу, ПутьККопии));

    // Проверяем, что файл скопировался.
    СвойстваУдаленногоФайла = ЯндексДиск.ПолучитьСвойстваРесурса(ПутьККопии, Новый Структура("fields", "name"));
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваУдаленногоФайла));    

    // Прибираем за собой.
    ЯндексДиск.Удалить(ПутьКИсходномуФайлу, Истина);
    ЯндексДиск.Удалить(ПутьККопии, Истина);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПеремещениеФайла() Экспорт
    
    ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".txt";
    ПутьКИсходномуФайлу = "/" + ИмяФайла;
    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКИсходномуФайлу);

    ПутьВПапкеНазначения = "/test-folder/" + ИмяФайла;

    юТест.ПроверитьИстину(ЯндексДиск.Переместить(ПутьКИсходномуФайлу, ПутьВПапкеНазначения));

    // Проверяем, что файл Переместился: по пути назначения он появился
    СвойстваУдаленногоФайла = ЯндексДиск.ПолучитьСвойстваРесурса(ПутьВПапкеНазначения, Новый Структура("fields", "name"));
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваУдаленногоФайла));    

    // а по исходному пути его больше нет.
    МассивАргументов = Новый Массив;
    МассивАргументов.Добавить(ПутьКИсходномуФайлу);
    МассивАргументов.Добавить(Новый Структура("fields", "name"));    
    ПроверитьЧтоВызовВыбрасываетИсключение(ЯндексДиск, "ПолучитьСвойстваРесурса", МассивАргументов, "404");

    // Прибираем за собой.
    ЯндексДиск.Удалить(ПутьВПапкеНазначения, Истина);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСозданиеПапки() Экспорт

    ПутьКНовойПапке = "/test-folder/" + Строка(Новый УникальныйИдентификатор);
    
    ЯндексДиск.СоздатьПапку(ПутьКНовойПапке);

    // Проверяем, что папка была создана.
    СвойстваПапки = ЯндексДиск.ПолучитьСвойстваРесурса(ПутьКНовойПапке, Новый Структура("fields", "name"));
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваПапки)); 

    // Прибираем за собой.
    ЯндексДиск.Удалить(ПутьКНовойПапке, Истина);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПубликациюРесурсаИОтменуПубликации() Экспорт

    ПутьКИсходномуФайлу = "/test-folder/" + Строка(Новый УникальныйИдентификатор) + ".txt";
    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКИсходномуФайлу);

    ПубличныйUrl = ЯндексДиск.Опубликовать(ПутьКИсходномуФайлу);
    
    // Получили публичную ссылку.
    юТест.ПроверитьВхождение(ПубличныйUrl, "https://yadi.sk");

    // Стал доступен публичный ключ файла.
    СвойстваФайла = ЯндексДиск.ПолучитьСвойстваРесурса(ПутьКИсходномуФайлу);
    юТест.ПроверитьИстину(СвойстваФайла.Свойство("public_key"));

    ЯндексДиск.ОтменитьПубликацию(ПутьКИсходномуФайлу);

    // Теперь публичный ключ больше не доступен.
    СвойстваФайла = ЯндексДиск.ПолучитьСвойстваРесурса(ПутьКИсходномуФайлу);
    юТест.ПроверитьЛожь(СвойстваФайла.Свойство("public_key"));

    // Прибираем за собой.
    ЯндексДиск.Удалить(ПутьКИсходномуФайлу, Истина);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеПубличногоРесурса() Экспорт
    
    ПутьКИсходномуФайлу = "/test-folder/" + Строка(Новый УникальныйИдентификатор) + ".txt";
    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКИсходномуФайлу);
    ПубличныйUrl = ЯндексДиск.Опубликовать(ПутьКИсходномуФайлу);

    ЦелевойКаталог = КаталогВременныхФайлов();
    ПутьКСкачанномуФайлу = ЯндексДиск.СкачатьПубличныйРесурс(ЦелевойКаталог, ПубличныйUrl);
    
    юТест.ПроверитьИстину((Новый Файл(ПутьКСкачанномуФайлу)).Существует());
    
    // Прибираем за собой.
    ЯндексДиск.Удалить(ПутьКИсходномуФайлу, Истина);
    УдалитьФайлы(ПутьКСкачанномуФайлу);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеОтдельногоФайлаИзПубличнойПапки() Экспорт

    // Ссылка на публичную папку https://yadi.sk/d/Skw4ZnU8meYy8
    СвойстваПубличнойПапки = ЯндексДиск.ПолучитьСвойстваРесурса("/public_folder", Новый Структура("fields", "public_key"));

    ЦелевойКаталог = КаталогВременныхФайлов();
    ПутьКСкачанномуФайлу = ЯндексДиск.СкачатьПубличныйРесурс(ЦелевойКаталог, СвойстваПубличнойПапки.public_key, "/file_from_public_folder.txt");
    
    юТест.ПроверитьИстину((Новый Файл(ПутьКСкачанномуФайлу)).Существует());    

    // Прибираем за собой.
    УдалитьФайлы(ПутьКСкачанномуФайлу);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкачиваниеПубличногоРесурсаВЗагрузки() Экспорт

    // Ссылка на публичную папку https://yadi.sk/d/Skw4ZnU8meYy8
    СвойстваПубличногоФайла = ЯндексДиск.ПолучитьСвойстваРесурса("/public_folder/public_file.txt");
    
    юТест.ПроверитьИстину(ЯндексДиск.СохранитьПубличныйРесурсВЗагрузки(СвойстваПубличногоФайла.public_key));

    // Убедимся, что файл появился в папке "Загрузки":
    СвойстваСкачанногоФайла = ЯндексДиск.ПолучитьСвойстваРесурса("/Загрузки/public_file.txt", Новый Структура("fields", "name"));
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваСкачанногоФайла));

    // Прибираем за собой.
    ЯндексДиск.Удалить("/Загрузки/public_file.txt", Истина);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьОчисткуКорзины() Экспорт

    ПутьКИсходномуФайлу = "/test-folder/" + Строка(Новый УникальныйИдентификатор) + ".txt";
    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКИсходномуФайлу);

    ЯндексДиск.Удалить(ПутьКИсходномуФайлу);

    СписокФайловВКорзине = ЯндексДиск.ПолучитьСвойстваРесурсаВКорзине("/", Новый Структура("fields", "_embedded.items.name"));
    юТест.ПроверитьБольше(СписокФайловВКорзине._embedded.items.Количество(), 0);

    СсылкаНаСостояниеОперации = ЯндексДиск.ОчиститьКорзину();
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СсылкаНаСостояниеОперации));

КонецПроцедуры

Процедура ТестДолжен_ПроверитьВосстановлениеИзКорзины() Экспорт

    ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".txt";

    ПутьКИсходномуФайлу = "/test-folder/" + ИмяФайла;

    ЯндексДиск.ЗагрузитьНаДиск(ПолучитьАбсолютныйПуть("data/file-to-upload.txt"), ПутьКИсходномуФайлу);
    ЯндексДиск.Удалить(ПутьКИсходномуФайлу, Ложь, Истина);

    юТест.ПроверитьИстину(ЯндексДиск.ВосстановитьРесурсИзКорзины(ИмяФайла,,,Истина));

    // Убедимся, что файл восстановлен.
    СвойстваФайла = ЯндексДиск.ПолучитьСвойстваРесурса(ПутьКИсходномуФайлу, Новый Структура("fields", "name"));
    юТест.ПроверитьРавенство(Тип("Структура"), ТипЗнч(СвойстваФайла));

    // Прибираем за собой.
    ЯндексДиск.Удалить(ПутьКИсходномуФайлу, Истина);

КонецПроцедуры

///////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ
///////////////////////////////////////////////////////////////////

Процедура ПроверитьЧтоВызовВыбрасываетИсключение(Объект, ИмяМетода, МассивАргументовМетода, ФрагментИсключения="")

    ИсключениеВозникло = Ложь;

    Попытка
        Рефлектор = Новый Рефлектор;
        Рефлектор.ВызватьМетод(Объект, ИмяМетода, МассивАргументовМетода);
    Исключение
        ИсключениеВозникло = Истина;
        ТекстИсключения = ОписаниеОшибки();
    КонецПопытки;
    
    юТест.ПроверитьИстину(
        ИсключениеВозникло И Найти(ТекстИсключения, ФрагментИсключения) > 0, 
        "Ожидали, что " + ИмяМетода + " ВЫБРОСИТ ИСКЛЮЧЕНИЕ" + 
            ?(ЗначениеЗаполнено(ФрагментИсключения), " СОДЕРЖАЩЕЕ ТЕКСТ <" + ФрагментИсключения + ">, а был текст <" + ТекстИсключения + ">.", "")
    );
        
КонецПроцедуры

Функция ПолучитьАбсолютныйПуть(ОтносительныйПуть)
    ТекущийПуть = Новый Файл(ТекущийСценарий().Источник).Путь;
    Возврат ОбъединитьПути(ТекущийПуть, ОтносительныйПуть);
КонецФункции

Функция РежимОтладки()
    Для каждого АргументКомСтроки из АргументыКоманднойСтроки Цикл
        Если НРег(АргументКомСтроки) = "--debug" Тогда
            Возврат Истина;
        КонецЕсли; 
    КонецЦикла;
    Возврат Ложь;    
КонецФункции

Функция ПолучитьПеременнуюСреды(ИмяПеременной)
    СистемнаяИнформация = Новый СистемнаяИнформация;
    Возврат СистемнаяИнформация.ПолучитьПеременнуюСреды(ИмяПеременной);
КонецФункции

Функция ПолучитьТокенАвторизации()
    Токен = ПолучитьПеременнуюСреды("YADISK_OAUTH_TOKEN");
    Если ПустаяСтрока(Токен) Тогда
        ПутьКФайлуСТокеном = ОбъединитьПути(Новый Файл(ТекущийСценарий().Источник).Путь, "oauth_token.txt");
        Если (Новый Файл(ПутьКФайлуСТокеном)).Существует() Тогда
            ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуСТокеном);
            Токен = СокрЛП(ЧтениеТекста.Прочитать);
            ЧтениеТекста.Закрыть();
        КонецЕсли;
    КонецЕсли;
    Возврат Токен;
КонецФункции

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализировать();